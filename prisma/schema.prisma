generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuarios {
  id                  Int          @id @default(autoincrement())
  cedula              String
  correo              String
  password            String
  genero              String
  fotoCedula          String
  fotoUsuario         String
  tipoUsuario         String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  apellidos           String
  fechaNacimiento     DateTime
  nombres             String
  datosExtraPaciente  Pacientes[]
  datosExtraTerapeuta Terapeutas[]
  mensajesEnviados  Mensajes[]  @relation("EmisorMensajes")
  mensajesRecibidos Mensajes[]  @relation("ReceptorMensajes")
}

model Terapeutas {
  id                 Int                  @id @default(autoincrement())
  idUsuario          Int
  aniosExperiencia   Int
  titulo             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  terapeuta_paciente Terapeuta_Paciente[]
  usuario            Usuarios             @relation(fields: [idUsuario], references: [id])
  plan_terapeuta     PlanesTerapeuta?
}

model Pacientes {
  id                 Int                  @id @default(autoincrement())
  idUsuario          Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  usuario            Usuarios             @relation(fields: [idUsuario], references: [id])
  terapeuta_paciente Terapeuta_Paciente[]
}

model Terapeuta_Paciente {
  id           Int        @id @default(autoincrement())
  id_terapeuta Int
  id_paciente  Int
  estado       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rutina       Rutina[]
  citas        Citas[]
  paciente     Pacientes  @relation(fields: [id_paciente], references: [id])
  terapeuta    Terapeutas @relation(fields: [id_terapeuta], references: [id])
}

model Rutina {
  id                    Int                  @id @default(autoincrement())
  id_terapeuta_paciente Int
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  nombre                String?              @db.VarChar(255)
  ejercicio_rutina      Ejercicio_Rutina[]
  recurrencia_rutina    Recurrencia_Rutina[]
  terapeuta_paciente    Terapeuta_Paciente   @relation(fields: [id_terapeuta_paciente], references: [id])
}

model Recurrencia_Rutina {
  id                  Int      @id @default(autoincrement())
  id_rutina           Int
  fechaHoraProgramada DateTime
  estado              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  rutina              Rutina   @relation(fields: [id_rutina], references: [id])
}

model Ejercicio {
  id               Int                @id @default(autoincrement())
  nombre           String
  video_url        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ejercicio_rutina Ejercicio_Rutina[]
}

model Ejercicio_Rutina {
  id           Int       @id @default(autoincrement())
  id_rutina    Int
  repeticiones Int
  orden        Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  id_ejercicio Int
  ejercicio    Ejercicio @relation(fields: [id_ejercicio], references: [id])
  rutina       Rutina    @relation(fields: [id_rutina], references: [id])
}

model PlanesTerapeuta {
  id             Int        @id @default(autoincrement())
  id_terapeuta   Int        @unique
  precio_mensual Float
  precio_anual   Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  terapeuta      Terapeutas @relation(fields: [id_terapeuta], references: [id])
}

model Mensajes {
  id          Int      @id @default(autoincrement())
  id_emisor   Int
  id_receptor Int
  mensaje     String
  visto       Boolean  @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  emisor      Usuarios @relation("EmisorMensajes", fields: [id_emisor], references: [id])
  receptor    Usuarios @relation("ReceptorMensajes", fields: [id_receptor], references: [id])
}

model Citas {
  id          Int      @id @default(autoincrement())
  id_terapeuta_paciente Int
  fechaHoraProgramada DateTime 
  estado String
  notas String?
  direccion String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  terapeuta_paciente Terapeuta_Paciente @relation(fields: [id_terapeuta_paciente], references: [id])
}